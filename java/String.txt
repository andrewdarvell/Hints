
	Приведенный ниже фрагмент кода создает объект s типа String инициализируя его строкой из трех символов, 
переданных конструктору в ка-честве параметра в символьном массиве.
	
	1)	char chars[] = { 'а', 'b', 'с' }: 
		String s = new String(chars); 
	2) 	char chars[] = { 'a', 'b', 'с', 'd', 'e', 'f' }: 
		String s = new String(chars,2,3); 
	
charAt()
	Получить символ по индексу из строки
	char charAt(int a) 
	
	char ch;
	ch = "abc".charAt(1)
	ch == 'a'
	
	
Длина строки
	1) 	String s = "Блаблабла"
		s.length
	2)	"бла".length()	

Последовательности операторов 
	String s = "four: " + 2 + 2;
	Res : "four: 22"
	
	String s = "four: " + (2 + 2);
	Res : "four: 4"
	
Извлечение подстроки 
	1) в массив
	int start = 10; 
	int end = 14; 
	char buf[] = new char[end - start]; 
	s.getChars(start, end, buf, 0);
	
	!!!метод getChars не включает в выходной буфер символ с индексом end
	В String есть еще одна функция - toCharArray, которая возвращает в выходном массиве типа char всю строку.
	
	2) в строку
		substring
		Прим: 	s.substring(5)
				s.substring(5,7) - c 5 позиции 7 символов
Сравнение строк
	s1.equals(s2)
	s1.equalsIgnoreCase(s2)
	Метод regionMatches используется для сравнения подстроки в исходной строке с подстрокой в строке-параметре. 
	Метод startsWith проверяет, начинается ли данная подстрока фрагментом, переданным методу в качестве параметра. 
	Метод endsWith проверяет совпадает ли с параметром конец строки.

Упорядочение
	Для приложений, в которых требуется сортировка, нужно знать, какая из двух строк меньше другой. 
	Для ответа на этот вопрос нужно воспользоваться методом compareTo класса String. 
	Если целое значение, возвращенное методом, отрицательно, то строка, с которой был вызван метод, меньше строки-параметра, если положительно - больше. 
	Если же метод compareTo вернул значение 0, строки идентичны.
	
Поиск подстроки
	indexOf и lastIndexOf
	Прим: s.indexOf('f')
	Возвращает индекс подстроки или -1, если подстрока не найдена.
	!!!!!Индекс начинается с 0.

Конкатенация строк 
	concat
	s.concat("еее")
	
Замена символов
	replace
	В качестве параметров задаются два символа. 
	Все сим-волы, совпадающие с первым, заменяются в новой копии строки на вто-рой символ.
	Прим:	"Hello".replace('l' , 'w') -> "Hewwo"

Смена регистра	
	toLowerCase и toUpperCase

Обрезать пробелы
	trim
	Прим:	"Hello World    ".trim() -> "Hello World" 
	
valueOf 

StringBuffer
	length - возвращает текущую длину
	capacity - зарезервированное место
	ensureCapacity - увеличить зарезервированное место
	setLength - задаёт длину строки
	charAt и setCharAt
		Одиночный символ может быть извлечен из объекта StringBuffer с помощью метода charAt.
	append - конкатенация строк
	insert - вставка подстроки
		s.insert(6,"there ");
	
	

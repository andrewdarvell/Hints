Кратко
	public - без ограничений
	protected - Видна всем классам в одном пакете и наследникам класса в другом пакете.
	package protected - как public в пределах пакета
	private - видна только классу в котором переменная. Наследники тоже не видят.


***public***
	
	class A {
	  public int m;
	  public void f() {
	  }
	  public static String name = "Test";
	}
	
	class B {
	  void someFunction(){
		String myString = A.name; /* К публичным статическим членам можно обращаться даже не имея экземпляра */
		A a = new A();            /* Создаем экземпляр */
		a.m = 10;                 /* Доступ к публичному целому члену в точности такой же как к обычной целой переменной */
		a.m++; 
		a.f();                    /* Функция так же доступна из любого места */
	  }
	}
	
***protected***
	
	Доступ внутри пакета, а так же доступ !подклассов! из других пакетов.
	class A {
	  protected int x;
	  protected void f() {}
	  protected static String name = "Ku-Ku";
	}

	class B extends A {
	  public void someFunc() {
		x = 10; //Доступ к защищённому члену материнского класса
		f(); 
		A ref = new A();
		ref.x = 13; //В контексте дочернего класса отношение к защищённым членам как к публичным
		String bebe = A.name; //Статические переменные - не исключение
	  }
	}
 
	class C {
	  public void someFunc() {
		String mmm = A.name; //Неверный вызов. Переменная name - защищена и не видна извне (Только если класс С находится 
							 //в другом пакете. Если класс С находится в том же пакете, что и А, то будет доступна)
		A a = new A();
		int myX = a.x; //Неверный вызов. Переменная x - не видна извне (Только если класс С находится в другом пакете. Если 
					   //класс С находится в том же пакете, что и А, то будет доступна)
		a.x = 1; //Неверный вызов. Переменная x - не видна извне (Только если класс С находится в другом пакете. Если класс С 
				 //находится в том же пакете, что и А, то будет доступна)}}
		a.f(); //Неверный вызов. Функция f - не видна извне (Только если класс С находится в другом пакете. Если класс С находится 
			   //в том же пакете, что и А, то будет доступна)}}
	  }
	}
	
***package protected***
	Присваивается по умолчанию, действует как Public в пределах пакета (package).
	
	class A { //Этот класс виден только в пакете, в котором находится сам
	  int x;  //Члены класса видны как публичные для всех классов данного пакета
	}
	
***private***
	class A {
	  private int x; //переменную x видно исключительно внутри класса A
	 
	  public void setX(int val) { //обычно такую функцию называют "setter"
		x = val;
	  }
	 
	  public int getX() { //обычно такую функцию называют "getter"
		return x;
	  }
	}
	 
	class B extends A {
	  public void someFunc() {
		this.x = 10; //Ошибка! Приватные переменные не видны даже наследникам
	  }
	}

Пакеты доступны всегда, поэтому у них нет модификаторов доступа (можно сказать, что все они public, то есть любой существующий в системе пакет может использоваться из любой точки программы).
Типы (классы и интерфейсы) верхнего уровня объявления. При их объявлении существует всего две возможности: указать модификатор public или не указывать его.
	Если доступ к типу является public, то это означает, что он доступен из любой точки кода. Если же он не public, то уровень доступа назначается по умолчанию: тип доступен только внутри того пакета, где он объявлен.
Массив имеет тот же уровень доступа, что и тип, на основе которого он объявлен (естественно, все примитивные типы являются полностью доступными).
Элементы и конструкторы объектных типов. Обладают всеми четырьмя возможными значениями уровня доступа. Все элементы интерфейсов являются public.	
InputStream – это базовый класс для потоков ввода, т.е. чтения. Соответственно, он описывает базовые методы для работы 
				с байтовыми потоками данных. Эти методы необходимы всем классам, которые наследуются от InputStream.
	
	read()	
			Простейшая операция представлена методом read() (без аргументов). 
			Он является абстрактным и, соответственно, должен быть определен в классах-наследниках. 
			Этот метод предназначен для считывания ровно одного байта из потока, однако возвращает при этом значение типа int.
			В том случае, если считывание произошло успешно, 
			возвращаемое значение лежит в диапазоне от 0 до 255 и представляет собой полученный байт (значение int содержит 4 байта и 
			получается простым дополнением нулями в двоичном представлении). Обратите внимание, что полученный таким образом байт не
			обладает знаком и не находится в диапазоне от -128 до +127, как примитивный тип byte в Java.

			Если достигнут конец потока, то есть в нем больше нет информации для чтения, то возвращаемое значение равно -1.
			
			На практике обычно приходится считывать не один, а сразу несколько байт – то есть массив байт. Для этого используется метод read(), 
			где в качестве параметров передается массив byte[]
			
			Если же мы изначально хотим заполнить не весь массив, а только его часть, 
			то для этих целей используется метод read(), которому, кроме массива byte[], 
			передаются еще два int значения. Первое – это позиция в массиве, с которой следует начать заполнение, 
			второе – количество байт, которое нужно считать.
			
	available()
			Возвращает число – количество байт, именно на данный момент готовых к считыванию.
		
	close()
	
			Этим вызовом будут освобождены все системные ресурсы, связанные с потоком.
			
OutputStream – это базовый класс для потоков вывода.
			В классе OutputStream аналогичным образом определяются три метода write() – один принимающий в качестве параметра int, 
			второй – byte[] и третий – byte[], плюс два int -числа. Все эти методы ничего не возвращают ( void ).

**********************************************************
Классы-реализации потоков данных

Классы ByteArrayInputStream и ByteArrayOutputStream

			Самый естественный и простой источник, откуда можно считывать байты, – это, конечно, массив байт. 
			Класс ByteArrayInputStream представляет поток, считывающий данные из массива байт. 
			Этот класс имеет конструктор, которому в качестве параметра передается массив byte[]. 
			Соответственно, при вызове методов read() возвращаемые данные будут браться именно из этого массива. 
			
Классы FileInputStream и FileOutputStream

			Конструктор такого класса в качестве параметра принимает название файла, из которого будет производиться считывание. 
			При указании строки имени файла нужно учитывать, что она будет напрямую передана операционной системе, 
			поэтому формат имени файла и пути к нему может различаться на разных платформах.
			Если при вызове этого конструктора передать строку, указывающую на несуществующий файл или каталог, то будет брошено 
			java.io.FileNotFoundException. Если же объект успешно создан, то при вызове его методов read() 
			возвращаемые значения будут считываться из указанного файла.
			
			close()
			
			available() возвращает число байт, которое может быть на данный момент считано без блокирования.
			
			
			лучше закрывать потоки в finally блоке.
			...
			} finally {
			try{inFile.close();}catch(IOException e){};
			}
			Такой подход гарантирует, что поток будет закрыт и будут освобождены все связанные с ним системные ресурсы.
			
PipedInputStream и PipedOutputStream
		
		Классы PipedInputStream и PipedOutputStream характеризуются тем, что их объекты всегда используются в паре – к одному объекту 
		PipedInputStream привязывается (подключается) один объект PipedOutputStream. Они могут быть полезны, если в программе необходимо 
		организовать обмен данными между модулями (например, между потоками выполнения).
		
		Эти классы применяются следующим образом: создается по объекту PipedInputStream и PipedOutputStream, после чего они могут 
		быть соединены между собой. Один объект PipedOutputStream может быть соединен с ровно одним объектом PipedInputStream, и наоборот. 
		Затем в объект PipedOutputStream записываются данные, после чего они могут быть считаны именно в подключенном объекте PipedInputStream. 
		Такое соединение можно обеспечить либо вызовом метода connect() с передачей соответствующего объекта PipedI/OStream (будем так кратко 
		обозначать пару классов, в данном случае PipedInputStream и PipedOutputStream ), либо передать этот объект еще при вызове конструктора.
		
	PipedInputStream pipeIn = new PipedInputStream();
	PipedOutputStream pipeOut = new PipedOutputStream(pipeIn);
			
StringBufferInputStream
		Иногда бывает удобно работать с текстовой строкой String как с потоком байт. Для этого можно воспользоваться классом 
		StringBufferInputStream. При создании объекта этого класса необходимо передать конструктору объект String. 
		Данные, возвращаемые методом read(), будут считываться именно из этой строки.
		
SequenceInputStream
		Класс SequenceInputStream объединяет поток данных из других двух и более входных потоков. 
		Данные будут вычитываться последовательно – сначала все данные из первого потока в списке, затем из второго, и так далее. 
		Конец потока SequenceInputStream будет достигнут только тогда, когда будет достигнут конец потока, последнего в списке.
		
		
******************************************************


Классы FilterInputStream и FilterOutputStream и их наследники

		Эти классы унаследованы от основных базовых классов ввода/вывода – InputStream и OutputStream, соответственно. Конструктор 
		FilterInputStream принимает в качестве параметра объект InputStream и имеет модификатор доступа protected.
		
		
BufferedInputStream и BufferedOutputStream

		На практике при считывании с внешних устройств ввод данных почти всегда необходимо буферизировать. 
		Для буферизации данных служат классы BufferedInputStream и BufferedOutputStream
		
LineNumberInputStream
		Класс LineNumberInputStream во время чтения данных производит подсчет, сколько строк было считано из потока.
		Номер строки, на которой в данный момент происходит чтение, можно узнать путем вызова метода getLineNumber().
		Также можно и перейти к определенной строке вызовом метода setLineNumber(int lineNumber).
		
PushbackInputStream
		Этот фильтр позволяет вернуть во входной поток считанные из него данные.
		
PrintStream
		Этот класс используется для конвертации и записи строк в байтовый поток. В нем определен метод print(…), 
		принимающий в качестве аргумента различные примитивные типы Java, а также тип Object. 
		При вызове передаваемые данные будут сначала преобразованы в строку вызовом метода String.valueOf(), после чего записаны в поток.


DataInputStream и DataOutputStream
		До сих пор речь шла только о считывании и записи в поток данных в виде byte. Для работы с другими примитивными типами данных Java 
		определены интерфейсы DataInput и DataOutput и их реализации – классы-фильтры DataInputStream и DataOutputStream.
		Чтение необходимо организовать так, чтобы данные запрашивались в виде тех же типов, в той же последовательности, как и производилась запись. 
		Если записать, например, int и long, а потом считывать их как short, чтение будет выполнено корректно, без исключительных ситуаций, но числа 
		будут получены совсем другие.
		
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		   DataOutputStream outData = new DataOutputStream(out);
		   outData.writeByte(128); 
		   // этот метод принимает аргумент int, но записывает
		   // лишь младший байт
		   outData.writeInt(128);
		   outData.writeLong(128);
		   outData.writeDouble(128);
		   outData.close()
		   
**********************************************************************


ObjectInputStream и ObjectOutputStream
**********************************************************************


Байтовый поток	Символьный поток

InputStream				Reader
OutputStream			Writer
ByteArrayInputStream	CharArrayReader
ByteArrayOutputStream	CharArrayWriter
Нет аналога				InputStreamReader
Нет аналога				OutputStreamWriter
FileInputStream			FileReader
FileOutputStream		FileWriter
FilterInputStream		FilterReader
FilterOutputStream		FilterWriter
BufferedInputStream		BufferedReader
BufferedOutputStream	BufferedWriter
PrintStream				PrintWriter
DataInputStream			Нет аналога
DataOutputStream		Нет аналога
ObjectInputStream		Нет аналога
ObjectOutputStream		Нет аналога
PipedInputStream		PipedReader
PipedOutputStream		PipedWriter
StringBufferInputStream	StringReader
Нет аналога				StringWriter
LineNumberInputStream	LineNumberReader
PushBackInputStream		PushBackReader
SequenceInputStream		Нет аналога

		